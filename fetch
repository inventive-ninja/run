diff --git a/docs/api/module.rst b/docs/api/module.rst
index 9c637d2..4c53e70 100644
--- a/docs/api/module.rst
+++ b/docs/api/module.rst
@@ -17,7 +17,7 @@ Module class
 Helper functions
 ----------------
 
-.. autofunction:: run.module.attribute
+.. autofunction:: run.module.fetch
 .. autofunction:: run.module.skip
 
 Concrete modules
@@ -31,6 +31,5 @@ Concrete modules
 Others
 ------
 
-.. autoclass:: run.module.ModuleAttributes
 .. autoclass:: run.module.ModuleMetaclass
 .. autoclass:: run.module.ModulePrototype   
\ No newline at end of file
diff --git a/run/dependency/resolver.py b/run/dependency/resolver.py
index 573b8d7..6fb7a10 100644
--- a/run/dependency/resolver.py
+++ b/run/dependency/resolver.py
@@ -1,6 +1,6 @@
 import logging
-from box.functools import cachedproperty
 from abc import ABCMeta, abstractmethod
+from box.functools import cachedproperty
 
 class Resolver(metaclass=ABCMeta):
 
@@ -71,8 +71,9 @@ class CommonResolver(Resolver):
             from ..task import Task
             module = self._attribute.meta_module
             try:
-                return module.meta_attributes.get_attribute(
-                    self._task_name, category=Task, resolve=True)
+                from ..module import fetch
+                return fetch(module, self._task_name, 
+                    category=Task, resolve=True)
             except AttributeError as exception:
                 if self._attribute.meta_strict:
                     raise
diff --git a/run/module/__init__.py b/run/module/__init__.py
index f0abf5e..e1b0997 100644
--- a/run/module/__init__.py
+++ b/run/module/__init__.py
@@ -1,6 +1,6 @@
 from .module import Module
 
-from .attribute import attribute
+from .fetch import fetch
 from .skip import skip
 
 from .auto import AutoModule
@@ -8,6 +8,5 @@ from .find import FindModule
 from .null import NullModule
 from .subprocess import SubprocessModule
 
-from .attributes import ModuleAttributes
 from .metaclass import ModuleMetaclass
 from .prototype import ModulePrototype
\ No newline at end of file
diff --git a/run/module/fetch.py b/run/module/fetch.py
index 7b17c83..517f140 100644
--- a/run/module/fetch.py
+++ b/run/module/fetch.py
@@ -1,8 +1,44 @@
+from box.importlib import import_object
 from ..attribute import Attribute; Attribute #PyDev warning bug
 
-def attribute(module, name, *, category=Attribute, resolve=False):
-    """Get attribute from module by given name.
+def fetch(module, name, *, category=Attribute, resolve=False):
+    """Return attribute by given name.
     
-    .. seealso:: It's shortcut for :func:`run.module.Module.__getattribute__`.
+    :param str name: attribute name, supports nested like "module.attribute"
+    :param None/type/str category: returns attribute only of given class
+    :param bool resolve: if True resolves attribute and returns value
+    
+    :raises TypeError: if module is not a Module
+    :raises AttributeError: if module has not attribute for given name
+    :raises TypeError: if attribute is not instance of given category
+    
+    :returns: attribute instance/attribute value
+    :rtype: :class:`run.Attribute`/mixed
     """
-    return module.__getattribute__(name, category=category, resolve=resolve)
\ No newline at end of file
+    from .module import Module
+    if not isinstance(module, Module):
+        raise TypeError(
+            'Argument "{argument}" is not a Module.'.
+            format(argument=module))
+    try:
+        name, nested_name = name.split('.', 1)
+    except ValueError:
+        nested_name = None
+    try:
+        attribute = module.meta_attributes[name]
+    except KeyError:
+        raise AttributeError(
+        'Module "{module}" has no attribute "{name}".'.
+        format(module=module, name=name)) from None
+    if nested_name:
+        return fetch(attribute, nested_name, 
+            category=category, resolve=resolve)
+    if category:
+        category = import_object(category)
+        if not isinstance(attribute, category):
+            raise TypeError(
+                'Attribute "{name}" is not a {category}.'.
+                format(name=name, category=category))
+    if resolve:
+        return attribute.__get__(attribute.meta_module)
+    return attribute  
\ No newline at end of file
diff --git a/run/module/module.py b/run/module/module.py
index 00aab63..1e1e914 100644
--- a/run/module/module.py
+++ b/run/module/module.py
@@ -4,7 +4,7 @@ from pprint import pprint
 from collections import OrderedDict
 from ..attribute import Attribute
 from ..task import Task, NullTask
-from .attributes import ModuleAttributes
+from .fetch import fetch
 from .metaclass import ModuleMetaclass
 
 class Module(Attribute, metaclass=ModuleMetaclass):
@@ -20,21 +20,23 @@ class Module(Attribute, metaclass=ModuleMetaclass):
             'and can\'t be set to any value'.
             format(module=self))
     
-    def __getattr__(self, name):
-        return self.meta_attributes.get_attribute(name, resolve=True)
-    
-    def __getattribute__(self, name, *, category=Attribute, resolve=True):
-        """Return attribute by given name.
-        """
-        return super().__getattribute__(name)
+    def __getattribute__(self, name):
+        try:
+            return super().__getattribute__(name)
+        except AttributeError:
+            return fetch(self, name, resolve=True)
      
     @property
     def meta_attributes(self):
         """Module's attributes dict-like object.
         
-        .. seealso:: :class:`run.module.ModuleAttributes`
+        Dict contains not resolved attribute instances.
         """
-        return ModuleAttributes(self)
+        attributes = {}
+        for name, attr in vars(type(self)).items():
+            if isinstance(attr, Attribute):
+                attributes[name] = attr
+        return attributes
     
     @property
     def meta_basedir(self):
@@ -162,7 +164,7 @@ class Module(Attribute, metaclass=ModuleMetaclass):
         """Print attributes.
         """
         if attribute:
-            attribute = self.meta_attributes.get_attribute(attribute)
+            attribute = fetch(self, attribute)
         else:
             attribute = self
         names = []
@@ -180,7 +182,7 @@ class Module(Attribute, metaclass=ModuleMetaclass):
         """Print information.
         """
         if attribute:
-            attribute = self.meta_attributes.get_attribute(attribute)
+            attribute = fetch(self, attribute)
         else:
             attribute = self
         info = attribute.meta_qualname
@@ -203,7 +205,7 @@ class Module(Attribute, metaclass=ModuleMetaclass):
         """Print metadata.
         """
         if attribute:
-            attribute = self.meta_attributes.get_attribute(attribute)
+            attribute = fetch(self, attribute)
         else:
             attribute = self
         meta = OrderedDict()
diff --git a/run/task/derived.py b/run/task/derived.py
index d4f3ee2..437d724 100644
--- a/run/task/derived.py
+++ b/run/task/derived.py
@@ -1,3 +1,4 @@
+from ..module import fetch
 from .task import Task
 
 class DerivedTask(Task):
@@ -27,5 +28,5 @@ class DerivedTask(Task):
     
     @property
     def _task(self):
-        return self.meta_module.meta_attributes.get_attribute(
-            self._task_name, category=Task, resolve=True)
\ No newline at end of file
+        return fetch(self.meta_module, self._task_name, 
+            category=Task, resolve=True)
\ No newline at end of file
